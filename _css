 var rmsPrefix = /^-ms-/,
        rdashAlpha = /-([\da-z])/gi,
        cssNormalTransform = {
           letterSpacing: "0",
           fontWeight: "400"
        },

        cssPrefixes = [ "Webkit", "Moz", "ms" ],
        emptyStyle = document.createElement( "div" ).style,
        
        // 缓存属性用的 {maskRepeat: "WebkitMaskRepeat",width: "width"} 优化处理
        cssProps={},

       cssNumber={
        "animationIterationCount": true,
        "columnCount": true,
        "fillOpacity": true,
        "flexGrow": true,
        "flexShrink": true,
        "fontWeight": true,
        "lineHeight": true,
        "opacity": true,
        "order": true,
        "orphans": true,
        "widows": true,
        "zIndex": true,
        "zoom": true
       },
      csshooks={
        opacity: {
            get:function(elem) {
                var ret=getStyle(elem)['opacity'];
                return ret===''?'1':ret;
            }
        }
      };

    // 带-的首字母大写
    function fcamelCase( all, letter ) {
        return letter.toUpperCase();
    }

    // 先把带有-ms-转成 ms-,   margin-left转化成这样 marginLeft
    function camelCase( string ) {
        return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
    }
    
    // 处理css3前缀
    function vendorPropName( name ) {

        // 如果存在返回
        if ( name in emptyStyle ) {
            return name;
        }

        // 首字母大写
        var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
            i = cssPrefixes.length;
       
        while ( i-- ) {
            // 加浏览器厂商前缀，存在就返回
            name = cssPrefixes[ i ] + capName;
            if ( name in emptyStyle ) {
                return name;
            }
        }
    }

    // 获取最终样式名
    function finalPropName( name ) {
        var ret = cssProps[ name ];
        if ( !ret ) {

            ret = cssProps[ name ] = vendorPropName( name ) || name;
        }
        return ret;
    }
    // 获取样式
    function getStyle(obj) {
        // 标准浏览器ie9+等
        if(window.getComputedStyle) {
            getStyle=function(obj) {
                return window.getComputedStyle(obj,false);
            }
        } else {
            getStyle=function(obj) {
                return obj.currentStyle;
            }
        }
        return getStyle(obj);
    }
    
    
    /**
     * @desc 处理各种情况
     * @desc 对于css3系列  步骤：1.先把 background-color -> backgroundColor
     *                           2.不存在就加浏览器厂商前缀，看是否存在于Style里面
     * @DateTime 2018-07-18
     * @param    {elem}   elem   [description]
     * @param    {}   name   [description]
     * @param    {[type]}   extra  [description]
     * @param    {[type]}   styles [description]
     * @return   {[type]}          [description]
     */
    function _css(elem, name) {
         var val,hooks,
              origName=camelCase(name);
         
         
         hooks=csshooks[name]||csshooks[origName];

         name = finalPropName( origName );
         console.log(cssProps)
         if(hooks&&'get' in hooks) {
            val=hooks.get(elem);
         }     

         if(val===undefined) {
            val=getStyle(elem)[name];
         }
      
         if(val==='normal'&&name in cssNormalTransform) {
            val=cssNormalTransform[name];
         }

         
        return val;

    }
    
    /**
     * @desc  设置样式
     * @DateTime 2018-07-18
     * @param    {Ele}   elem  [description]
     * @param    {String]}   name  [description]
     * @param    {Number||String}   value [description]
     * @return   {[type]}         [description]
     */
    function _style(elem, name,value) {
        
        var ret, type, hooks,
            origName = camelCase( name ),
            style = elem.style;
        
        name = finalPropName( origName );
        // 不存在，或者文本节点，注释，没有样式
        if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
            return;
        }
   
        // hooks = csshooks[ name ] || jQuery.csshooks[ origName ];

        if(value!==undefined) {
            type=typeof value;
            
            // null or NaN
            if(value==null||value!==value) {
                return;
            }

            if(type==="number") {
              value += cssNumber[origName] ? "": "px";
            }
           style[ name ] = value; 
        }

    }

    /**
     * @desc  修正参数
     * @DateTime 2018-07-18
     * @param    {obj||Array}   elems 单个元素或者多个元素
     * @param    {Function} fn    回调函数
     * @param    {String}   key   [description]
     * @param    {String||Number}   value [description]
     * @param    {Boolean}   raw 判断是不是函数
     * @return   {[type]}         [description]
     */
    function access(elems, fn, key, value,raw) {
         var i=0,
             len=elems.length;  // 单个元素是没有length，只有是伪数组才有
         
         // set many values
         if(type(key)==='object') {
            for(i in key) {
                access(elems,fn,i,key[i],raw);
            }
         // set one value   
         } else if(value!==undefined) {
            if(typeof value!=='function') {
                raw=true; // 值不是函数
            }
            
            // 单个元素设置
            if(!len) {
                fn(elems,key,raw?value:value.call(elems,i,fn(elems,key)));
            
            // 多个元素设置
            } else {
                if(fn) {
                    for(;i<len;i++) {                // fn(elems[i],key)获取之前的值
                        
                        fn(elems[i],key,raw?value:value.call(elems[i],i,fn(elems[i],key)));
                    }
                 } 
            }
             

         }   

        

         // 总是返回第一个元素的样式
         // 有len表示数组，没len表示只有一个元素
         return len? fn(elems[0],key):fn(elems,key);
    }

    /**
     * @desc css接口,access修正参数作用
     * @desc access始终返回第一个元素的样式值
     * @DateTime 2018-07-18
     * @param    {Element}   eles
     * @param    {obj||String}   name  [description]
     * @param    {Number||String}   value [description]
     * @return   {Number||String}         [description]
     */
    function css(eles,name,value) {
       return access(eles,function(ele,name,value) {
            var len,styles,
                map={},
                i=0;
             // css(ele,["width","height"])这种情况
             // return {"width":"40px","height":"30px"}   
            if(Array.isArray(name)) {
                styles=getStyle(ele);
                len=name.length;
                for(;i<len;i++) {
                    map[name[i]]=_css(ele,name[i]);
                }
                return map;
              
            }    
            return value!==undefined?
               _style(ele,name,value): // 设置
               _css(ele,name);   // 获取
       },name,value);
    }
